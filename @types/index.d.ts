/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export class ExternalObject<T> {
  readonly '': {
    readonly '': unique symbol
    [K: symbol]: T
  }
}
export function version(): string
export function toggleStringCache(toggle: boolean): void
export interface JsRollingOptions {
  windowSize: string
  weights?: Array<number>
  minPeriods: number
  center: boolean
}
export interface JsRowCount {
  name: string
  offset: number
}
export interface WriteCsvOptions {
  hasHeader?: boolean
  sep?: string
  quote?: string
}
export interface Shape {
  height: number
  width: number
}
export interface ReadCsvOptions {
  inferSchemaLength?: number
  chunkSize: number
  hasHeader: boolean
  ignoreErrors: boolean
  nRows?: number
  skipRows: number
  sep: string
  rechunk: boolean
  columns?: Array<string>
  encoding: string
  nThreads?: number
  dtypes?: Record<string, Wrap>
  nullValues?: Wrap
  path?: string
  lowMemory: boolean
  commentChar?: string
  quoteChar?: string
  parseDates: boolean
  skipRowsAfterHeader: number
  rowCount?: JsRowCount
}
export function readCsv(pathOrBuffer: string | Buffer, options: ReadCsvOptions): JsDataFrame
export interface ReadJsonOptions {
  inferSchemaLength?: number
  batchSize?: number
  format?: string
}
export interface WriteJsonOptions {
  format: string
}
export function readJsonLines(pathOrBuffer: string | Buffer, options: ReadJsonOptions): JsDataFrame
export function readJson(pathOrBuffer: string | Buffer, options: ReadJsonOptions): JsDataFrame
export interface ReadParquetOptions {
  columns?: Array<string>
  projection?: Array<number>
  nRows?: number
  rowCount?: JsRowCount
}
export function readParquet(pathOrBuffer: string | Buffer, options: ReadParquetOptions, parallel: Wrap): JsDataFrame
export interface ReadIpcOptions {
  columns?: Array<string>
  projection?: Array<number>
  nRows?: number
  rowCount?: JsRowCount
}
export function readIpc(pathOrBuffer: string | Buffer, options: ReadIpcOptions): JsDataFrame
export interface ReadAvroOptions {
  columns?: Array<string>
  projection?: Array<number>
  nRows?: number
}
export function readAvro(pathOrBuffer: string | Buffer, options: ReadAvroOptions): JsDataFrame
export function fromRows(rows: unknown[], schema?: Wrap | undefined | null, inferSchemaLength?: number | undefined | null): JsDataFrame
export const enum DataType {
  Int8 = 0,
  Int16 = 1,
  Int32 = 2,
  Int64 = 3,
  UInt8 = 4,
  UInt16 = 5,
  UInt32 = 6,
  UInt64 = 7,
  Float32 = 8,
  Float64 = 9,
  Bool = 10,
  Utf8 = 11,
  List = 12,
  Date = 13,
  Datetime = 14,
  Time = 15,
  Object = 16,
  Categorical = 17,
  Struct = 18
}
export function horizontalConcat(dfs: Array<JsDataFrame>): JsDataFrame
export function argWhere(condition: JsExpr): JsExpr
export interface ScanCsvOptions {
  inferSchemaLength?: number
  cache?: boolean
  overwriteDtype?: Record<string, Wrap>
  overwriteDtypeSlice?: Array<Wrap>
  hasHeader?: boolean
  ignoreErrors: boolean
  nRows?: number
  skipRows?: number
  sep: string
  rechunk?: boolean
  columns?: Array<string>
  encoding: string
  lowMemory?: boolean
  commentChar?: string
  quoteChar?: string
  parseDates?: boolean
  skipRowsAfterHeader: number
  rowCount?: JsRowCount
}
export function scanCsv(path: string, options: ScanCsvOptions): JsLazyFrame
export interface ScanParquetOptions {
  nRows?: number
  cache?: boolean
  parallel: Wrap
  rowCount?: JsRowCount
  rechunk?: boolean
  rowCountName?: string
  rowCountOffset?: number
  lowMemory?: boolean
  useStatistics?: boolean
}
export function scanParquet(path: string, options: ScanParquetOptions): JsLazyFrame
export interface ScanIpcOptions {
  nRows?: number
  cache?: boolean
  rechunk?: boolean
  rowCount?: JsRowCount
  memmap?: boolean
}
export function scanIpc(path: string, options: ScanIpcOptions): JsLazyFrame
export interface JsonScanOptions {
  inferSchemaLength?: number
  batchSize: number
  nThreads?: number
  numRows?: number
  skipRows?: number
  lowMemory?: boolean
  rowCount?: JsRowCount
}
export function scanJson(path: string, options: JsonScanOptions): JsLazyFrame
export function when(condition: JsExpr): JsWhen
export function col(name: string): JsExpr
export function count(): JsExpr
export function first(): JsExpr
export function last(): JsExpr
export function cols(names: Array<string>): JsExpr
export function dtypeCols(dtypes: Array<Wrap>): JsExpr
export function intRange(start: Wrap, end: Wrap, step: number, dtype?: Wrap | undefined | null): JsExpr
export function intRanges(start: Wrap, end: Wrap, step: number, dtype?: Wrap | undefined | null): JsExpr
export function pearsonCorr(a: Wrap, b: Wrap, ddof?: number | undefined | null): JsExpr
export function spearmanRankCorr(a: Wrap, b: Wrap, ddof: number | undefined | null, propagateNans: boolean): JsExpr
export function cov(a: Wrap, b: Wrap): JsExpr
export function argSortBy(by: Array<JsExpr>, descending: Array<boolean>): JsExpr
export function lit(value: JsAnyValue): JsExpr
export function range(low: number, high: number, dtype: Wrap): JsExpr
export function concatLst(s: Array<JsExpr>): JsResult
export function concatStr(s: Array<JsExpr>, sep: string): JsExpr
export function asStruct(exprs: Array<JsExpr>): JsExpr
export function seriesSetWithMaskStr(series: JsSeries, mask: JsSeries, value?: Wrap | undefined | null): JsSeries
export function seriesSetWithMaskF64(series: JsSeries, mask: JsSeries, value?: number | undefined | null): JsSeries
export function seriesSetWithMaskF32(series: JsSeries, mask: JsSeries, value?: Wrap | undefined | null): JsSeries
export function seriesSetWithMaskU8(series: JsSeries, mask: JsSeries, value?: Wrap | undefined | null): JsSeries
export function seriesSetWithMaskU16(series: JsSeries, mask: JsSeries, value?: Wrap | undefined | null): JsSeries
export function seriesSetWithMaskU32(series: JsSeries, mask: JsSeries, value?: number | undefined | null): JsSeries
export function seriesSetWithMaskU64(series: JsSeries, mask: JsSeries, value?: Wrap | undefined | null): JsSeries
export function seriesSetWithMaskI8(series: JsSeries, mask: JsSeries, value?: Wrap | undefined | null): JsSeries
export function seriesSetWithMaskI16(series: JsSeries, mask: JsSeries, value?: Wrap | undefined | null): JsSeries
export function seriesSetWithMaskI32(series: JsSeries, mask: JsSeries, value?: number | undefined | null): JsSeries
export function seriesSetWithMaskI64(series: JsSeries, mask: JsSeries, value?: number | undefined | null): JsSeries
export function seriesGetF32(s: JsSeries, index: number): number | null
export function seriesGetF64(s: JsSeries, index: number): number | null
export function seriesGetU8(s: JsSeries, index: number): number | null
export function seriesGetU16(s: JsSeries, index: number): number | null
export function seriesGetU32(s: JsSeries, index: number): number | null
export function seriesGetU64(s: JsSeries, index: number): number | null
export function seriesGetI8(s: JsSeries, index: number): number | null
export function seriesGetI16(s: JsSeries, index: number): number | null
export function seriesGetI32(s: JsSeries, index: number): number | null
export function seriesGetI64(s: JsSeries, index: number): number | null
export function seriesGetDate(s: JsSeries, index: number): number | null
export function seriesGetDatetime(s: JsSeries, index: number): number | null
export function seriesGetDuration(s: JsSeries, index: number): number | null
export function seriesGetStr(s: JsSeries, index: number): string | null
export function seriesAddU8(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddU16(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddU32(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddU64(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddI8(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddI16(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddI32(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddI64(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddDatetime(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddDuration(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddF32(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddF64(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubU8(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubU16(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubU32(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubU64(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubI8(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubI16(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubI32(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubI64(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubDatetime(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubDuration(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubF32(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubF64(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivU8(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivU16(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivU32(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivU64(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivI8(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivI16(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivI32(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivI64(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivF32(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivF64(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulU8(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulU16(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulU32(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulU64(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulI8(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulI16(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulI32(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulI64(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulF32(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulF64(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemU8(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemU16(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemU32(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemU64(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemI8(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemI16(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemI32(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemI64(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemF32(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemF64(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddU8Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddU16Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddU32Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddU64Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddI8Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddI16Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddI32Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddI64Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddF32Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesAddF64Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubU8Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubU16Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubU32Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubU64Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubI8Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubI16Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubI32Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubI64Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubF32Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesSubF64Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivU8Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivU16Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivU32Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivU64Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivI8Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivI16Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivI32Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivI64Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivF32Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesDivF64Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulU8Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulU16Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulU32Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulU64Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulI8Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulI16Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulI32Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulI64Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulF32Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesMulF64Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemU8Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemU16Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemU32Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemU64Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemI8Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemI16Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemI32Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemI64Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemF32Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesRemF64Rhs(s: JsSeries, other: JsAnyValue): JsSeries
export function seriesEqU8(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesEqU16(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesEqU32(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesEqU64(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesEqI8(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesEqI16(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesEqI32(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesEqI64(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesEqF32(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesEqF64(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesEqStr(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesNeqU8(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesNeqU16(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesNeqU32(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesNeqU64(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesNeqI8(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesNeqI16(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesNeqI32(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesNeqI64(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesNeqF32(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesNeqF64(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesNeqStr(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtU8(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtU16(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtU32(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtU64(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtI8(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtI16(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtI32(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtI64(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtF32(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtF64(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtStr(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtEqU8(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtEqU16(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtEqU32(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtEqU64(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtEqI8(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtEqI16(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtEqI32(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtEqI64(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtEqF32(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtEqF64(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesGtEqStr(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtU8(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtU16(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtU32(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtU64(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtI8(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtI16(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtI32(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtI64(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtF32(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtF64(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtStr(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtEqU8(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtEqU16(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtEqU32(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtEqU64(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtEqI8(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtEqI16(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtEqI32(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtEqI64(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtEqF32(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtEqF64(s: JsSeries, rhs: JsAnyValue): JsSeries
export function seriesLtEqStr(s: JsSeries, rhs: JsAnyValue): JsSeries
export class JsDataFrame {
  toJs(): unknown
  serialize(format: string): Buffer
  static deserialize(buf: Buffer, format: string): JsDataFrame
  constructor(columns: unknown[])
  estimatedSize(): number
  toString(): string
  add(s: JsSeries): JsDataFrame
  sub(s: JsSeries): JsDataFrame
  div(s: JsSeries): JsDataFrame
  mul(s: JsSeries): JsDataFrame
  rem(s: JsSeries): JsDataFrame
  addDf(s: JsDataFrame): JsDataFrame
  subDf(s: JsDataFrame): JsDataFrame
  divDf(s: JsDataFrame): JsDataFrame
  mulDf(s: JsDataFrame): JsDataFrame
  remDf(s: JsDataFrame): JsDataFrame
  rechunk(): JsDataFrame
  fillNull(strategy: Wrap): JsDataFrame
  join(other: JsDataFrame, leftOn: Array<string>, rightOn: Array<string>, how: string): JsDataFrame
  getColumns(): Array<JsSeries>
  /** Get column names */
  get columns(): Array<string>
  set columns(names: Array<string>)
  withColumn(s: JsSeries): JsDataFrame
  /** Get datatypes */
  dtypes(): Array<Wrap>
  nChunks(): number
  get shape(): Shape
  get height(): number
  get width(): number
  get schema(): Wrap
  hstackMut(columns: unknown[]): void
  hstack(columns: unknown[]): JsDataFrame
  extend(df: JsDataFrame): void
  vstackMut(df: JsDataFrame): void
  vstack(df: JsDataFrame): JsDataFrame
  dropInPlace(name: string): JsSeries
  dropNulls(subset?: Array<string> | undefined | null): JsDataFrame
  drop(name: string): JsDataFrame
  selectAtIdx(idx: number): JsSeries | null
  findIdxByName(name: string): number | null
  column(name: string): JsSeries
  select(selection: Array<string>): JsDataFrame
  filter(mask: JsSeries): JsDataFrame
  take(indices: Array<number>): JsDataFrame
  takeWithSeries(indices: JsSeries): JsDataFrame
  sort(byColumn: string, descending: boolean, nullsLast: boolean, multithreaded: boolean, maintainOrder: boolean): JsDataFrame
  sortInPlace(byColumn: string, descending: boolean, maintainOrder: boolean): void
  replace(column: string, newCol: JsSeries): void
  rename(column: string, newCol: string): void
  replaceAtIdx(index: number, newCol: JsSeries): void
  insertAtIdx(index: number, newCol: JsSeries): void
  slice(offset: number, length: number): JsDataFrame
  head(length?: number | undefined | null): JsDataFrame
  tail(length?: number | undefined | null): JsDataFrame
  isUnique(): JsSeries
  isDuplicated(): JsSeries
  frameEqual(other: JsDataFrame, nullEqual: boolean): boolean
  withRowCount(name: string, offset?: number | undefined | null): JsDataFrame
  groupby(by: Array<string>, select: Array<string> | undefined | null, agg: string): JsDataFrame
  pivotExpr(values: Array<string>, index: Array<string>, columns: Array<string>, aggregateExpr: Wrap | undefined | null, maintainOrder: boolean, sortColumns: boolean, separator?: string | undefined | null): JsDataFrame
  clone(): JsDataFrame
  melt(idVars: Array<string>, valueVars: Array<string>, valueName?: string | undefined | null, variableName?: string | undefined | null, streamable?: boolean | undefined | null): JsDataFrame
  partitionBy(groups: Array<string>, stable: boolean, includeKey: boolean): Array<JsDataFrame>
  shift(periods: number): JsDataFrame
  unique(maintainOrder: boolean, subset: Array<string> | undefined | null, keep: Wrap, slice?: Wrap | undefined | null): JsDataFrame
  lazy(): JsLazyFrame
  max(): JsDataFrame
  min(): JsDataFrame
  sum(): JsDataFrame
  mean(): JsDataFrame
  std(ddof?: number | undefined | null): JsDataFrame
  var(ddof?: number | undefined | null): JsDataFrame
  median(): JsDataFrame
  hmean(nullStrategy: Wrap): JsSeries | null
  hmax(): JsSeries | null
  hmin(): JsSeries | null
  hsum(nullStrategy: Wrap): JsSeries | null
  quantile(quantile: number, interpolation: Wrap): JsDataFrame
  toDummies(separator: string | undefined | null, dropFirst: boolean): JsDataFrame
  nullCount(): JsDataFrame
  shrinkToFit(): void
  hashRows(k0: Wrap, k1: Wrap, k2: Wrap, k3: Wrap): JsSeries
  transpose(keepNamesAs?: Wrap | undefined | null, names?: string | Array<string> | undefined | null): JsDataFrame
  sampleN(n: number, withReplacement: boolean, shuffle: boolean, seed?: number | undefined | null): JsDataFrame
  sampleFrac(frac: number, withReplacement: boolean, shuffle: boolean, seed?: number | undefined | null): JsDataFrame
  upsample(by: Array<string>, indexColumn: string, every: string, offset: string, stable: boolean): JsDataFrame
  toStruct(name: string): JsSeries
  unnest(names: Array<string>): JsDataFrame
  toRow(idx: number): unknown[]
  toRows(): unknown[]
  toRowObj(idx: number | number): object
  toObjects(): unknown[]
  writeCsv(pathOrBuffer: unknown, options: WriteCsvOptions): void
  writeParquet(pathOrBuffer: unknown, compression: Wrap): void
  writeIpc(pathOrBuffer: unknown, compression: Wrap): void
  writeJson(pathOrBuffer: unknown, options: WriteJsonOptions): void
  writeAvro(pathOrBuffer: unknown, compression: string): void
}
export class JsLazyGroupBy {
  agg(aggs: Array<JsExpr>): JsLazyFrame
  head(n: number): JsLazyFrame
  tail(n: number): JsLazyFrame
}
export class JsLazyFrame {
  toJs(): unknown
  serialize(format: string): Buffer
  static deserialize(buf: Buffer, format: string): JsLazyFrame
  static cloneExternal(lf: JsLazyFrame): JsLazyFrame
  describePlan(): string
  describeOptimizedPlan(): string
  toDot(optimized: boolean): string
  optimizationToggle(typeCoercion?: boolean | undefined | null, predicatePushdown?: boolean | undefined | null, projectionPushdown?: boolean | undefined | null, simplifyExpr?: boolean | undefined | null, stringCache?: boolean | undefined | null, slicePushdown?: boolean | undefined | null): JsLazyFrame
  sort(byColumn: string, reverse: boolean, nullsLast: boolean, multithreaded: boolean, maintainOrder: boolean): JsLazyFrame
  sortByExprs(byColumn: Array<JsExpr>, reverse: Array<boolean>, nullsLast: boolean, maintainOrder: boolean): JsLazyFrame
  cache(): JsLazyFrame
  collectSync(): JsDataFrame
  collect(): Promise<JsDataFrame>
  fetch(nRows: number): Promise<JsDataFrame>
  fetchSync(nRows: number): JsDataFrame
  filter(predicate: JsExpr): JsLazyFrame
  select(exprs: Array<JsExpr>): JsLazyFrame
  groupby(by: Array<JsExpr>, maintainOrder: boolean): JsLazyGroupBy
  groupbyRolling(indexColumn: JsExpr, period: string, offset: string, closed: Wrap, by: Array<JsExpr>, checkSorted: boolean): JsLazyGroupBy
  groupbyDynamic(indexColumn: JsExpr, every: string, period: string, offset: string, truncate: boolean, includeBoundaries: boolean, closed: Wrap, by: Array<JsExpr>, startBy: Wrap, checkSorted: boolean): JsLazyGroupBy
  joinAsof(other: JsLazyFrame, leftOn: JsExpr, rightOn: JsExpr, leftBy: Array<string> | undefined | null, rightBy: Array<string> | undefined | null, allowParallel: boolean, forceParallel: boolean, suffix: string, strategy: string, tolerance?: Wrap | undefined | null, toleranceStr?: string | undefined | null): JsLazyFrame
  join(other: JsLazyFrame, leftOn: Array<JsExpr>, rightOn: Array<JsExpr>, allowParallel: boolean, forceParallel: boolean, how: Wrap, suffix: string): JsLazyFrame
  withColumn(expr: JsExpr): JsLazyFrame
  withColumns(exprs: Array<JsExpr>): JsLazyFrame
  rename(existing: Array<string>, newNames: Array<string>): JsLazyFrame
  reverse(): JsLazyFrame
  shift(periods: number): JsLazyFrame
  shiftAndFill(periods: number, fillValue: JsExpr): JsLazyFrame
  fillNull(fillValue: JsExpr): JsLazyFrame
  fillNan(fillValue: JsExpr): JsLazyFrame
  min(): JsLazyFrame
  max(): JsLazyFrame
  sum(): JsLazyFrame
  mean(): JsLazyFrame
  std(ddof?: number | undefined | null): JsLazyFrame
  var(ddof?: number | undefined | null): JsLazyFrame
  median(): JsLazyFrame
  quantile(quantile: number, interpolation: Wrap): JsLazyFrame
  explode(column: Array<JsExpr>): JsLazyFrame
  unique(maintainOrder: boolean, subset: Array<string> | undefined | null, keep: Wrap): JsLazyFrame
  dropNulls(subset?: Array<string> | undefined | null): JsLazyFrame
  slice(offset: number, len: number): JsLazyFrame
  tail(n: number): JsLazyFrame
  melt(idVars: Array<string>, valueVars: Array<string>, valueName?: string | undefined | null, variableName?: string | undefined | null, streamable?: boolean | undefined | null): JsLazyFrame
  withRowCount(name: string, offset?: number | undefined | null): JsLazyFrame
  dropColumns(cols: Array<string>): JsLazyFrame
  clone(): JsLazyFrame
  get columns(): Array<string>
  unnest(cols: Array<string>): JsLazyFrame
}
export class JsExpr {
  toJs(): unknown
  serialize(format: string): Buffer
  static deserialize(buf: Buffer, format: string): JsExpr
  add(rhs: JsExpr): JsExpr
  sub(rhs: JsExpr): JsExpr
  mul(rhs: JsExpr): JsExpr
  truediv(rhs: JsExpr): JsExpr
  mod(rhs: JsExpr): JsExpr
  floordiv(rhs: JsExpr): JsExpr
  toString(): string
  eq(other: JsExpr): JsExpr
  neq(other: JsExpr): JsExpr
  gt(other: JsExpr): JsExpr
  gtEq(other: JsExpr): JsExpr
  ltEq(other: JsExpr): JsExpr
  lt(other: JsExpr): JsExpr
  alias(name: string): JsExpr
  isNot(): JsExpr
  isNull(): JsExpr
  isNotNull(): JsExpr
  isInfinite(): JsExpr
  isFinite(): JsExpr
  isNan(): JsExpr
  isNotNan(): JsExpr
  min(): JsExpr
  max(): JsExpr
  mean(): JsExpr
  median(): JsExpr
  sum(): JsExpr
  nUnique(): JsExpr
  argUnique(): JsExpr
  unique(): JsExpr
  uniqueStable(): JsExpr
  first(): JsExpr
  last(): JsExpr
  list(): JsExpr
  quantile(quantile: JsExpr, interpolation: Wrap): JsExpr
  aggGroups(): JsExpr
  count(): JsExpr
  valueCounts(multithreaded: boolean, sorted: boolean): JsExpr
  uniqueCounts(): JsExpr
  cast(dataType: Wrap, strict: boolean): JsExpr
  sortWith(descending: boolean, nullsLast: boolean, multithreaded: boolean, maintainOrder: boolean): JsExpr
  argSort(reverse: boolean, multithreaded: boolean, maintainOrder: boolean): JsExpr
  argMax(): JsExpr
  argMin(): JsExpr
  take(idx: JsExpr): JsExpr
  sortBy(by: Array<JsExpr>, reverse: Array<boolean>): JsExpr
  backwardFill(): JsExpr
  forwardFill(): JsExpr
  shift(periods: number): JsExpr
  shiftAndFill(periods: number, fillValue: JsExpr): JsExpr
  fillNull(expr: JsExpr): JsExpr
  fillNullWithStrategy(strategy: string, limit: FillNullLimit): JsResult
  fillNan(expr: JsExpr): JsExpr
  dropNulls(): JsExpr
  dropNans(): JsExpr
  filter(predicate: JsExpr): JsExpr
  reverse(): JsExpr
  std(ddof?: number | undefined | null): JsExpr
  var(ddof?: number | undefined | null): JsExpr
  isUnique(): JsExpr
  isFirst(): JsExpr
  explode(): JsExpr
  takeEvery(n: number): JsExpr
  tail(n?: number | undefined | null): JsExpr
  head(n?: number | undefined | null): JsExpr
  slice(offset: JsExpr, length: JsExpr): JsExpr
  round(decimals: number): JsExpr
  floor(): JsExpr
  ceil(): JsExpr
  clip(min: Wrap, max: Wrap): JsExpr
  abs(): JsExpr
  isDuplicated(): JsExpr
  over(partitionBy: Array<JsExpr>): JsExpr
  and(expr: JsExpr): JsExpr
  not(): JsExpr
  xor(expr: JsExpr): JsExpr
  or(expr: JsExpr): JsExpr
  isIn(expr: JsExpr): JsExpr
  repeatBy(by: JsExpr): JsExpr
  pow(exponent: number): JsExpr
  cumsum(reverse: boolean): JsExpr
  cummax(reverse: boolean): JsExpr
  cummin(reverse: boolean): JsExpr
  cumprod(reverse: boolean): JsExpr
  product(): JsExpr
  strToDate(format: string | undefined | null, strict: boolean, exact: boolean, cache: boolean): JsExpr
  strToDatetime(format: string | undefined | null, timeUnit: Wrap | undefined | null, timeZone: TimeZone | undefined | null, strict: boolean, exact: boolean, cache: boolean): JsExpr
  strStrip(): JsExpr
  strRstrip(): JsExpr
  strLstrip(): JsExpr
  strPadStart(length: number, fillChar: string): JsExpr
  strPadEnd(length: number, fillChar: string): JsExpr
  strZFill(width: number): JsExpr
  strToUppercase(): JsExpr
  strSlice(start: number, length?: number | undefined | null): JsExpr
  strToLowercase(): JsExpr
  strLengths(): JsExpr
  strReplace(pat: string, val: string): JsExpr
  strReplaceAll(pat: string, val: string): JsExpr
  strContains(pat: string, strict: boolean): JsExpr
  strHexEncode(): JsExpr
  strHexDecode(strict: boolean): JsExpr
  strBase64Encode(): JsExpr
  strBase64Decode(strict: boolean): JsExpr
  strJsonExtract(dtype?: Wrap | undefined | null, inferSchemaLen?: number | undefined | null): JsExpr
  strJsonPathMatch(pat: string): JsExpr
  strExtract(pat: string, groupIndex: number): JsExpr
  strftime(fmt: string): JsExpr
  strSplit(by: string): JsExpr
  strSplitInclusive(by: string): JsExpr
  strSplitExact(by: string, n: number): JsExpr
  strSplitExactInclusive(by: string, n: number): JsExpr
  year(): JsExpr
  month(): JsExpr
  week(): JsExpr
  weekday(): JsExpr
  day(): JsExpr
  ordinalDay(): JsExpr
  hour(): JsExpr
  minute(): JsExpr
  second(): JsExpr
  nanosecond(): JsExpr
  durationDays(): JsExpr
  durationHours(): JsExpr
  durationSeconds(): JsExpr
  durationNanoseconds(): JsExpr
  durationMilliseconds(): JsExpr
  timestamp(): JsExpr
  dtEpochSeconds(): JsExpr
  dot(other: JsExpr): JsExpr
  hash(k0: Wrap, k1: Wrap, k2: Wrap, k3: Wrap): JsExpr
  reinterpret(signed: boolean): JsExpr
  mode(): JsExpr
  keepName(): JsExpr
  prefix(prefix: string): JsExpr
  suffix(suffix: string): JsExpr
  exclude(columns: Array<string>): JsExpr
  excludeDtype(dtypes: Array<Wrap>): JsExpr
  interpolate(method: Wrap): JsExpr
  rollingSum(options: JsRollingOptions): JsExpr
  rollingMin(options: JsRollingOptions): JsExpr
  rollingMax(options: JsRollingOptions): JsExpr
  rollingMean(options: JsRollingOptions): JsExpr
  rollingStd(options: JsRollingOptions): JsExpr
  rollingVar(options: JsRollingOptions): JsExpr
  rollingMedian(options: JsRollingOptions): JsExpr
  rollingQuantile(quantile: number, interpolation: Wrap, windowSize: string, weights: Array<number> | undefined | null, minPeriods: number, center: boolean, by?: string | undefined | null, closed?: Wrap | undefined | null): JsExpr
  rollingSkew(windowSize: number, bias: boolean): JsExpr
  lowerBound(): JsExpr
  upperBound(): JsExpr
  listMax(): JsExpr
  listMin(): JsExpr
  listSum(): JsExpr
  listMean(): JsExpr
  listSort(descending: boolean): JsExpr
  listReverse(): JsExpr
  listUnique(): JsExpr
  listLengths(): JsExpr
  listGet(index: JsExpr): JsExpr
  listJoin(separator: string): JsExpr
  listArgMin(): JsExpr
  listArgMax(): JsExpr
  listDiff(n: number, nullBehavior: Wrap): JsExpr
  listShift(periods: number): JsExpr
  listSlice(offset: JsExpr, length?: JsExpr | undefined | null): JsExpr
  listEval(expr: JsExpr, parallel: boolean): JsExpr
  rank(method: Wrap, reverse: boolean, seed?: Wrap | undefined | null): JsExpr
  diff(n: number, nullBehavior: Wrap): JsExpr
  pctChange(n: number): JsExpr
  skew(bias: boolean): JsExpr
  kurtosis(fisher: boolean, bias: boolean): JsExpr
  strConcat(delimiter: string): JsExpr
  catSetOrdering(ordering: string): JsExpr
  reshape(dims: Array<number>): JsExpr
  cumcount(reverse: boolean): JsExpr
  toPhysical(): JsExpr
  shuffle(seed: Wrap, fixedSeed: boolean): JsExpr
  sampleFrac(frac: number, withReplacement: boolean, shuffle: boolean, seed: number | undefined | null, fixedSeed: boolean): JsExpr
  ewmMean(alpha: number, adjust: boolean, minPeriods: number, bias: boolean, ignoreNulls: boolean): JsExpr
  ewmStd(alpha: number, adjust: boolean, minPeriods: number, bias: boolean, ignoreNulls: boolean): JsExpr
  ewmVar(alpha: number, adjust: boolean, minPeriods: number, bias: boolean, ignoreNulls: boolean): JsExpr
  extendConstant(value: JsAnyValue | undefined | null, n: number): JsExpr
  any(dropNulls: boolean): JsExpr
  all(dropNulls: boolean): JsExpr
  structFieldByName(name: string): JsExpr
  structRenameFields(names: Array<string>): JsExpr
  log(base: number): JsExpr
  entropy(base: number, normalize: boolean): JsExpr
  add(rhs: JsExpr): JsExpr
  sub(rhs: JsExpr): JsExpr
  mul(rhs: JsExpr): JsExpr
  trueDiv(rhs: JsExpr): JsExpr
  rem(rhs: JsExpr): JsExpr
  div(rhs: JsExpr): JsExpr
}
export class JsWhen {
  then(statement: JsExpr): JsThen
}
export class JsThen {
  when(condition: JsExpr): JsChainedWhen
  otherwise(statement: JsExpr): JsExpr
}
export class JsChainedWhen {
  then(statement: JsExpr): JsChainedThen
}
export class JsChainedThen {
  when(condition: JsExpr): JsChainedWhen
  otherwise(statement: JsExpr): JsExpr
}
export class JsSeries {
  toJs(): unknown
  serialize(format: string): Buffer
  static deserialize(buf: Buffer, format: string): JsSeries
  static newInt8Array(name: string, arr: Int8Array): JsSeries
  static newUint8Array(name: string, arr: Uint8Array): JsSeries
  static newUint8ClampedArray(name: string, arr: Uint8ClampedArray): JsSeries
  static newInt16Array(name: string, arr: Int16Array): JsSeries
  static newUint16Array(name: string, arr: Uint16Array): JsSeries
  static newInt32Array(name: string, arr: Int32Array): JsSeries
  static newUint32Array(name: string, arr: Uint32Array): JsSeries
  static newFloat32Array(name: string, arr: Float32Array): JsSeries
  static newFloat64Array(name: string, arr: Float64Array): JsSeries
  static newBigint64Array(name: string, arr: BigInt64Array): JsSeries
  static newBiguint64Array(name: string, arr: BigUint64Array): JsSeries
  static newOptStr(name: string, val: Wrap): JsSeries
  static newOptBool(name: string, val: Wrap, strict: boolean): JsSeries
  static newOptI32(name: string, val: Wrap, strict: boolean): JsSeries
  static newOptI64(name: string, val: Wrap, strict: boolean): JsSeries
  static newOptU64(name: string, val: Wrap, strict: boolean): JsSeries
  static newOptU32(name: string, val: Wrap, strict: boolean): JsSeries
  static newOptF32(name: string, val: Wrap, strict: boolean): JsSeries
  static newOptF64(name: string, val: Wrap, strict: boolean): JsSeries
  static newOptDate(name: string, values: Array<unknown>, strict?: boolean | undefined | null): JsSeries
  static newList(name: string, values: unknown[], dtype: Wrap): JsSeries
  static repeat(name: string, val: JsAnyValue, n: number, dtype: Wrap): JsSeries
  get dtype(): Wrap
  get inner(): ExternalObject<Series>
  get innerDtype(): DataType | null
  get name(): string
  toString(): string
  getFmt(index: Wrap, strLengths: Wrap): string
  estimatedSize(): number
  rechunk(inPlace: boolean): JsSeries | null
  getIdx(idx: number): Wrap
  bitand(other: JsSeries): JsSeries
  bitor(other: JsSeries): JsSeries
  bitxor(other: JsSeries): JsSeries
  cumsum(reverse?: boolean | undefined | null): JsSeries
  cummax(reverse?: boolean | undefined | null): JsSeries
  cummin(reverse?: boolean | undefined | null): JsSeries
  cumprod(reverse?: boolean | undefined | null): JsSeries
  chunkLengths(): Array<number>
  rename(name: string): void
  mean(): number | null
  max(): number | boolean | number | null
  min(): number | boolean | number | null
  sum(): number | boolean | number | null
  nChunks(): number
  limit(numElements: number): JsSeries
  slice(offset: number, length: number): JsSeries
  append(other: JsSeries): void
  extend(other: JsSeries): void
  filter(filter: JsSeries): JsSeries
  add(other: JsSeries): JsSeries
  sub(other: JsSeries): JsSeries
  mul(other: JsSeries): JsSeries
  div(other: JsSeries): JsSeries
  rem(other: JsSeries): JsSeries
  head(length?: number | undefined | null): JsSeries
  tail(length?: number | undefined | null): JsSeries
  sort(reverse?: boolean | undefined | null): JsSeries
  argsort(reverse: boolean, nullsLast: boolean, multithreaded: boolean, maintainOrder: boolean): JsSeries
  unique(): JsSeries
  uniqueStable(): JsSeries
  valueCounts(sorted: boolean): JsDataFrame
  argUnique(): JsSeries
  argMin(): number | null
  argMax(): number | null
  take(indices: Array<number>): JsSeries
  takeWithSeries(indices: JsSeries): JsSeries
  nullCount(): number
  hasValidity(): boolean
  isNull(): JsSeries
  isNotNull(): JsSeries
  isNotNan(): JsSeries
  isNan(): JsSeries
  isFinite(): JsSeries
  isInfinite(): JsSeries
  isUnique(): JsSeries
  sampleN(n: number, withReplacement: boolean, shuffle: boolean, seed?: Wrap | undefined | null): this
  sampleFrac(frac: number, withReplacement: boolean, shuffle: boolean, seed?: Wrap | undefined | null): this
  isDuplicated(): JsSeries
  explode(): JsSeries
  takeEvery(n: number): JsSeries
  seriesEqual(other: JsSeries, nullEqual: boolean, strict: boolean): boolean
  eq(rhs: JsSeries): JsSeries
  neq(rhs: JsSeries): JsSeries
  gt(rhs: JsSeries): JsSeries
  gtEq(rhs: JsSeries): JsSeries
  lt(rhs: JsSeries): JsSeries
  ltEq(rhs: JsSeries): JsSeries
  not(): JsSeries
  asStr(): string
  len(): number
  toPhysical(): JsSeries
  toTypedArray(): TypedArrayBuffer
  toArray(): Wrap
  median(): number | null
  quantile(quantile: number, interpolation: Wrap): JsAnyValue
  dropNulls(): JsSeries
  fillNull(strategy: Wrap): JsSeries
  isIn(other: JsSeries): JsSeries
  clone(): JsSeries
  shift(periods: number): JsSeries
  zipWith(mask: JsSeries, other: JsSeries): JsSeries
  structToFrame(): JsDataFrame
  structFields(): Array<string>
  strLengths(): JsSeries
  strContains(pat: string, strict: boolean): JsSeries
  strJsonExtract(dtype?: Wrap | undefined | null, inferSchemaLen?: number | undefined | null): JsSeries
  strJsonPathMatch(pat: string): JsSeries
  strExtract(pat: string, groupIndex: number): JsSeries
  strReplace(pat: string, val: string): JsSeries
  strReplaceAll(pat: string, val: string): JsSeries
  strToUppercase(): JsSeries
  strToLowercase(): JsSeries
  strSlice(start: number, length?: number | undefined | null): JsSeries
  strHexEncode(): JsSeries
  strHexDecode(strict: boolean): JsSeries
  strBase64Encode(): JsSeries
  strBase64Decode(strict: boolean): JsSeries
  strPadStart(length: number, fillChar: string): JsSeries
  strPadEnd(length: number, fillChar: string): JsSeries
  strZFill(length: number): JsSeries
  strftime(fmt: string): JsSeries
  arrLengths(): JsSeries
  toDummies(): JsSeries
  getList(index: number): JsSeries | null
  year(): JsSeries
  month(): JsSeries
  weekday(): JsSeries
  week(): JsSeries
  day(): JsSeries
  ordinalDay(): JsSeries
  hour(): JsSeries
  minute(): JsSeries
  second(): JsSeries
  nanosecond(): JsSeries
  dtEpochSeconds(): JsSeries
  peakMax(): JsSeries
  peakMin(): JsSeries
  nUnique(): number
  isFirst(): JsSeries
  round(decimals: number): JsSeries
  floor(): JsSeries
  ceil(): JsSeries
  shrinkToFit(): void
  dot(other: JsSeries): number | null
  hash(k0: Wrap, k1: Wrap, k2: Wrap, k3: Wrap): JsSeries
  reinterpret(signed: boolean): JsSeries
  mode(): JsSeries
  rank(method: Wrap, descending?: boolean | undefined | null, seed?: Wrap | undefined | null): JsSeries
  diff(n: number, nullBehavior: Wrap): JsSeries
  skew(bias: boolean): number | null
  kurtosis(fisher: boolean, bias: boolean): number | null
  cast(dtype: Wrap, strict?: boolean | undefined | null): JsSeries
  abs(): JsSeries
  reshape(dims: Array<number>): JsSeries
  shuffle(seed: Wrap): JsSeries
  extendConstant(value: Wrap, n: number): JsSeries
  timeUnit(): string | null
  setAtIdx(idx: JsSeries, values: JsSeries): void
}
